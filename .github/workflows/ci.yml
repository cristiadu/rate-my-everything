# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Project's CI

on:
  push:
    branches:
      - main
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Project's CI
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup PNPM
      uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # 4.1.0
      with:
        package_json_file: package.json
        run_install: false

    - name: Setup Node.js
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 #4.4.0
      with:
        node-version-file: '.nvmrc'
        cache: 'pnpm'
        cache-dependency-path: pnpm-lock.yaml
    - run: pnpm install
    - run: pnpm lint
    - run: pnpm build
    - run: pnpm -C ui build-storybook
    - run: pnpm test
    
    # Set up database for backend tests
    - name: Set up PostgreSQL
      run: |
        docker run --name postgres-test -e POSTGRES_PASSWORD=postgres -e POSTGRES_USER=postgres -e POSTGRES_DB=rate_my_everything_test -p 5432:5432 -d postgres
        # Wait for PostgreSQL to start
        sleep 5
    
    # Health check for backend application
    - name: Start Backend and verify it's running
      run: |
        # Export environment variables for the backend
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/rate_my_everything_test"
        export JWT_SECRET="test-jwt-secret-for-ci"
        export PORT=3000
        
        # Start the backend application
        cd api
        # Show the output directory structure
        echo "Dist folder content:"
        ls -la ./dist
        
        # Show the compiled index.js file
        echo "First 30 lines of index.js:"
        head -n 30 ./dist/index.js
        
        # Start the application
        nohup pnpm start > backend.log 2>&1 &
        # Save the PID to stop it later
        echo "BACKEND_PID=$!" >> $GITHUB_ENV
        
        # Wait for backend to become available with retries
        attempt_counter=0
        max_attempts=15
        echo "Waiting for backend to start..."
        
        until $(curl --output /dev/null --silent --fail http://localhost:3000/api/health); do
          if [ ${attempt_counter} -eq ${max_attempts} ]; then
            echo "Max attempts reached. Backend health check failed."
            cat backend.log
            exit 1
          fi
          
          printf '.'
          attempt_counter=$(($attempt_counter+1))
          sleep 3
        done
        
        # Verify backend health
        response=$(curl -s http://localhost:3000/api/health)
        echo "Backend Health Response: $response"
        if [[ "$response" != *"status\":\"ok"* ]]; then
          echo "Backend health check failed"
          cat backend.log
          exit 1
        fi
        
        echo "✅ Backend is running successfully"
    
    # Health check for frontend application
    - name: Start Frontend and verify it's running
      run: |
        # Start the frontend application on a different port
        cd ui && PORT=3001 nohup pnpm start > frontend.log 2>&1 &
        # Save the PID to stop it later
        echo "FRONTEND_PID=$!" >> $GITHUB_ENV
        
        # Wait for frontend to become available with retries
        attempt_counter=0
        max_attempts=15
        echo "Waiting for frontend to start..."
        
        until $(curl --output /dev/null --silent --fail http://localhost:3001/health); do
          if [ ${attempt_counter} -eq ${max_attempts} ]; then
            echo "Max attempts reached. Frontend health check failed."
            cat frontend.log
            exit 1
          fi
          
          printf '.'
          attempt_counter=$(($attempt_counter+1))
          sleep 3
        done
        
        echo "✅ Frontend is running successfully"
    
    # Clean up processes
    - name: Cleanup processes
      if: always()
      run: |
        kill $BACKEND_PID || true
        kill $FRONTEND_PID || true
        docker stop postgres-test || true
        docker rm postgres-test || true
